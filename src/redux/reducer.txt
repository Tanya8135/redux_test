// /* Before */
// // import { combineReducers } from "redux";

// // import { statusFilters } from "./constants";

// // const tasksInitialState = [
// //     { id: 0, text: "Learn HTML and CSS", completed: true },
// //     { id: 1, text: "Get good at JavaScript", completed: true },
// //     { id: 2, text: "Master React", completed: false },
// //     { id: 3, text: "Discovery Redux", completed: false },
// //     { id: 4, text: "Build amazing apps", completed: false },
// // ];

// // const tasksReducer = (state = tasksInitialState, action) => {
// //     switch (action.type) {
// //         case "tasks/addTask":
// //             return [...state, action.payload];
// //         case "tasks/deleteTask":
// //             return state.filter(task => task.id !== action.payload);
// //         case "tasks/toggleCompleted":
// //             return state.map(task => {
// //                 if (task.id !== action.payload) {
// //                     return task;
// //                 }
// //                 return { ...task, completed: !task.completed };
// //             });
// //         default:
// //             return state;
// //     }
// // };

// // const filtersInitialState = {
// //     status: statusFilters.all,
// // };

// // const filtersReducer = (state = filtersInitialState, action) => {
// //     switch (action.type) {
// //         case "filters/setStatusFilter":
// //             return {
// //                 ...state,
// //                 status: action.payload,
// //             };
// //         default:
// //             return state;
// //     }
// // };

// // export const rootReducer = combineReducers({
// //     tasks: tasksReducer,
// //     filters: filtersReducer,
// // });

// /* ---------------- After using create Action ----------- */
// /* import { addTask, deleteTask, toggleCompleted, setStatusFilter } from "./actions";
// import { statusFilters } from "./constants";

// const tasksInitialState = [
//     { id: 0, text: "Learn HTML and CSS", completed: true },
//     { id: 1, text: "Get good at JavaScript", completed: true },
//     { id: 2, text: "Master React", completed: false },
//     { id: 3, text: "Discovery Redux", completed: false },
//     { id: 4, text: "Build amazing apps", completed: false },
// ];

// export const tasksReducer = (state = tasksInitialState, action) => {
//     switch (action.type) {
//         case addTask.type:
//             return [...state, action.payload];
//         case deleteTask.type:
//             return state.filter(task => task.id !== action.payload);
//         case toggleCompleted.type:
//             return state.map(task => {
//                 if (task.id !== action.payload) {
//                     return task;
//                 }
//                 return { ...task, completed: !task.completed };
//             });
//         default:
//             return state;
//     }
// };

// const filtersInitialState = {
//     status: statusFilters.all,
// };

// export const filtersReducer = (state = filtersInitialState, action) => {
//     switch (action.type) {
//         case setStatusFilter.type:
//             return {
//                 ...state,
//                 status: action.payload,
//             };
//         default:
//             return state;
//     }
// }; */

// /* ----------- After using createReducer ---------- */
// /* virsion to RTK 2.0 */
// /* import { createReducer } from "@reduxjs/toolkit";
// import { addTask, deleteTask, toggleCompleted, setStatusFilter } from "./actions";
// import { statusFilters } from "./constants";

// const tasksInitialState = [
//     { id: 0, text: "Learn HTML and CSS", completed: true },
//     { id: 1, text: "Get good at JavaScript", completed: true },
//     { id: 2, text: "Master React", completed: false },
//     { id: 3, text: "Discovery Redux", completed: false },
//     { id: 4, text: "Build amazing apps", completed: false },
// ];

// export const tasksReducer = createReducer(tasksInitialState, {
//     [addTask]: (state, action) => {
//         state.push(action.payload);
//     },
//     [deleteTask]: (state, action) => {
//         const index = state.findIndex(task => task.id === action.payload);
//         state.splice(index, 1);
//     },
//     [toggleCompleted]: (state, action) => {
//         for (const task of state) {
//             if (task.id === action.payload) {
//                 task.completed = !task.completed;
//                 break;
//             }
//         }
//     },
// });

// const filtersInitialState = {
//     status: statusFilters.all,
// };

// export const filtersReducer = createReducer(filtersInitialState, {
//     [setStatusFilter]: (state, action) => {
//         state.status = action.payload;
//     },
// }); */


// /* ----------- After using createReducer ---------- */
// /* virsion after RTK 2.0 */
// import { createReducer } from "@reduxjs/toolkit";
// import { addTask, deleteTask, toggleCompleted, setStatusFilter } from "./actions";
// import { statusFilters } from "./constants";

// const tasksInitialState = [
//     { id: 0, text: "Learn HTML and CSS", completed: true },
//     { id: 1, text: "Get good at JavaScript", completed: true },
//     { id: 2, text: "Master React", completed: false },
//     { id: 3, text: "Discovery Redux", completed: false },
//     { id: 4, text: "Build amazing apps", completed: false },
// ];

// export const tasksReducer = createReducer(tasksInitialState, (builder) => {
//     builder
//         .addCase(addTask, (state, action) => {
//             state.push(action.payload);
//         })

//         .addCase(deleteTask, (state, action) => {
//             const index = state.findIndex(task => task.id === action.payload);
//             state.splice(index, 1);
//         })
//         .addCase(toggleCompleted, (state, action) => {
//             const task = state.find(task => task.id === action.payload);
//             if (task) {
//                 task.completed = !task.completed;
//             }
//         })
// });

// const filtersInitialState = {
//     status: statusFilters.all,
// };

// export const filtersReducer = createReducer(filtersInitialState, (builder) => {
//     builder
//         .addCase(setStatusFilter, (state, action) => {
//             state.status = action.payload;
//         });
// });